from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.views.generic.edit import FormMixin
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.urls import reverse_lazy, reverse
from django.shortcuts import get_object_or_404, redirect
from django.http import JsonResponse
from django.utils.translation import gettext_lazy as _
from django.db.models import Q, Count, Sum, Avg
from django.utils import timezone
from datetime import timedelta

from .models import Customer, Address, Contact
from .forms import CustomerForm, AddressForm, ContactForm, CustomerSearchForm


class CustomerListView(LoginRequiredMixin, FormMixin, ListView):
    model = Customer
    template_name = 'customers/customer_list.html'
    context_object_name = 'customers'
    paginate_by = 20
    form_class = CustomerSearchForm
    
    def get_queryset(self):
        queryset = super().get_queryset()
        
        # Add annotations for aggregate values
        queryset = queryset.annotate(
            total_order_count=Count('orders'),
            total_revenue_sum=Sum('orders__total_amount', filter=Q(orders__status='completed'))
        )
        
        form = self.get_form()
        
        if form.is_valid():
            query = form.cleaned_data.get('query')
            customer_type = form.cleaned_data.get('customer_type')
            is_active = form.cleaned_data.get('is_active')
            created_from = form.cleaned_data.get('created_from')
            created_to = form.cleaned_data.get('created_to')
            min_orders = form.cleaned_data.get('min_orders')
            min_revenue = form.cleaned_data.get('min_revenue')
            sort_by = form.cleaned_data.get('sort_by', 'name')
            sort_dir = form.cleaned_data.get('sort_dir', 'asc')
            
            if query:
                queryset = queryset.filter(
                    Q(name__icontains=query) | 
                    Q(company_name__icontains=query) | 
                    Q(email__icontains=query) | 
                    Q(phone__icontains=query)
                )
            
            if customer_type:
                queryset = queryset.filter(type=customer_type)
                
            if is_active:
                queryset = queryset.filter(is_active=True)
                
            if created_from:
                queryset = queryset.filter(created_at__gte=created_from)
                
            if created_to:
                queryset = queryset.filter(created_at__lte=created_to)
                
            if min_orders:
                queryset = queryset.filter(total_order_count__gte=min_orders)
                
            if min_revenue:
                queryset = queryset.filter(total_revenue_sum__gte=min_revenue)
            
            # Apply sorting
            if sort_by == 'total_orders':
                sort_field = 'total_order_count'
            elif sort_by == 'total_revenue':
                sort_field = 'total_revenue_sum'
            else:
                sort_field = sort_by
                
            if sort_dir == 'desc':
                sort_field = f'-{sort_field}'
                
            queryset = queryset.order_by(sort_field)
        
        return queryset
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        now = timezone.now()
        
        # Calculate statistics
        context['new_customers'] = Customer.objects.filter(
            created_at__gte=now - timedelta(days=30)
        ).count()
        
        context['active_customers'] = Customer.objects.filter(is_active=True).count()
        
        # Calculate average order value
        avg_order = Customer.objects.aggregate(
            avg_order_value=Avg('orders__total_amount', filter=Q(orders__status='completed'))
        )
        context['avg_order_value'] = avg_order['avg_order_value'] or 0
        
        # Add total counts
        context['total_customers'] = Customer.objects.count()
        context['total_revenue'] = Customer.objects.aggregate(
            total=Sum('orders__total_amount', filter=Q(orders__status='completed'))
        )['total'] or 0
        
        # Add sorting URLs
        current_params = self.request.GET.copy()
        sort_by = self.request.GET.get('sort_by', 'name')
        sort_dir = self.request.GET.get('sort_dir', 'asc')
        
        # Create sort URLs
        context['sort_urls'] = {}
        for field in ['name', 'created_at', 'total_orders', 'total_revenue']:
            params = current_params.copy()
            params['sort_by'] = field
            
            # Toggle direction if same field
            if sort_by == field:
                params['sort_dir'] = 'desc' if sort_dir == 'asc' else 'asc'
            else:
                params['sort_dir'] = 'asc'
                
            context['sort_urls'][field] = '?' + params.urlencode()
        
        context['sort_by'] = sort_by
        context['sort_dir'] = sort_dir
        
        return context
    
    def get_initial(self):
        return {
            'query': self.request.GET.get('query', ''),
            'customer_type': self.request.GET.get('customer_type', ''),
            'is_active': self.request.GET.get('is_active', True),
            'sort_by': self.request.GET.get('sort_by', 'name'),
            'sort_dir': self.request.GET.get('sort_dir', 'asc'),
            'created_from': self.request.GET.get('created_from', ''),
            'created_to': self.request.GET.get('created_to', ''),
            'min_orders': self.request.GET.get('min_orders', ''),
            'min_revenue': self.request.GET.get('min_revenue', ''),
        }


class CustomerDetailView(LoginRequiredMixin, DetailView):
    model = Customer
    template_name = 'customers/customer_detail.html'
    context_object_name = 'customer'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # Add forms for adding new address and contact
        context['address_form'] = AddressForm()
        context['contact_form'] = ContactForm()
        return context


class CustomerCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Customer
    form_class = CustomerForm
    template_name = 'customers/customer_form.html'
    success_message = _("Müşteri başarıyla oluşturuldu.")
    
    def get_success_url(self):
        return reverse('customers:customer-detail', kwargs={'pk': self.object.pk})


class CustomerUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Customer
    form_class = CustomerForm
    template_name = 'customers/customer_form.html'
    success_message = _("Müşteri bilgileri başarıyla güncellendi.")
    
    def get_success_url(self):
        return reverse('customers:customer-detail', kwargs={'pk': self.object.pk})


class CustomerDeleteView(LoginRequiredMixin, SuccessMessageMixin, DeleteView):
    model = Customer
    template_name = 'customers/customer_confirm_delete.html'
    success_url = reverse_lazy('customers:customer-list')
    success_message = _("Müşteri başarıyla silindi.")


# Address Views
class AddressCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Address
    form_class = AddressForm
    template_name = 'customers/address_form.html'
    success_message = _("Adres başarıyla eklendi.")
    
    def form_valid(self, form):
        customer = get_object_or_404(Customer, pk=self.kwargs['customer_pk'])
        form.instance.customer = customer
        return super().form_valid(form)
    
    def get_success_url(self):
        return reverse('customers:customer-detail', kwargs={'pk': self.kwargs['customer_pk']})


class AddressUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Address
    form_class = AddressForm
    template_name = 'customers/address_form.html'
    success_message = _("Adres başarıyla güncellendi.")
    
    def get_success_url(self):
        return reverse('customers:customer-detail', kwargs={'pk': self.object.customer.pk})


class AddressDeleteView(LoginRequiredMixin, DeleteView):
    model = Address
    
    def delete(self, request, *args, **kwargs):
        address = self.get_object()
        customer_pk = address.customer.pk
        address.delete()
        return JsonResponse({
            'success': True,
            'message': _("Adres başarıyla silindi.")
        })
    
    def get(self, request, *args, **kwargs):
        return self.post(request, *args, **kwargs)


# Contact Views
class ContactCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Contact
    form_class = ContactForm
    template_name = 'customers/contact_form.html'
    success_message = _("İlgili kişi başarıyla eklendi.")
    
    def form_valid(self, form):
        customer = get_object_or_404(Customer, pk=self.kwargs['customer_pk'])
        form.instance.customer = customer
        return super().form_valid(form)
    
    def get_success_url(self):
        return reverse('customers:customer-detail', kwargs={'pk': self.kwargs['customer_pk']})


class ContactUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Contact
    form_class = ContactForm
    template_name = 'customers/contact_form.html'
    success_message = _("İlgili kişi başarıyla güncellendi.")
    
    def get_success_url(self):
        return reverse('customers:customer-detail', kwargs={'pk': self.object.customer.pk})


class ContactDeleteView(LoginRequiredMixin, DeleteView):
    model = Contact
    
    def delete(self, request, *args, **kwargs):
        contact = self.get_object()
        customer_pk = contact.customer.pk
        contact.delete()
        return JsonResponse({
            'success': True,
            'message': _("İlgili kişi başarıyla silindi.")
        })
    
    def get(self, request, *args, **kwargs):
        return self.post(request, *args, **kwargs)