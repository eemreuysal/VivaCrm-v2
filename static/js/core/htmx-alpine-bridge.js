/**
 * VivaCRM - HTMX Alpine.js Bridge
 * 
 * Bu modÃ¼l, HTMX ve Alpine.js arasÄ±ndaki entegrasyonu saÄŸlar.
 * HTMX iÃ§erik gÃ¼ncellemelerinden sonra Alpine.js bileÅŸenlerinin
 * doÄŸru ÅŸekilde yeniden baÅŸlatÄ±lmasÄ±nÄ± garanti eder.
 */

import { createLogger, waitForElement, debounce } from './utils.js';

// ModÃ¼l iÃ§in logger oluÅŸtur
const logger = createLogger('HTMX-Alpine', {
  emoji: 'ğŸ”„'
});

/**
 * Alpine.js bileÅŸenlerinin state'ini korumak iÃ§in kullanÄ±lan Ã¶nbellek
 * @type {Map}
 */
const stateCache = new Map();

/**
 * HTMX ve Alpine.js arasÄ±ndaki entegrasyonu kurar.
 * TÃ¼m HTMX olaylarÄ±nÄ± dinler ve gerektiÄŸinde Alpine.js bileÅŸenlerini 
 * yeniden baÅŸlatÄ±r.
 */
export function setupHtmxIntegration() {
  logger.info('HTMX-Alpine entegrasyonu baÅŸlatÄ±lÄ±yor...');
  
  // Alpine.js ve HTMX'in yÃ¼klÃ¼ olup olmadÄ±ÄŸÄ±nÄ± kontrol et
  if (typeof window.Alpine === 'undefined') {
    logger.error('Alpine.js yÃ¼klÃ¼ deÄŸil! Entegrasyon kurulamadÄ±.');
    return false;
  }
  
  // Sayfa yÃ¼kleme durumunu kontrol et
  if (!document.body) {
    logger.warn('document.body henÃ¼z hazÄ±r deÄŸil, DOMContentLoaded olayÄ±nÄ± bekliyoruz...');
    document.addEventListener('DOMContentLoaded', () => setupHtmxIntegration());
    return false;
  }

  // HTMX yÃ¼klÃ¼ mÃ¼ kontrol et - window.htmx veya DOM'da data-hx-* olan elementler
  const htmxExists = typeof window.htmx !== 'undefined' || 
                     document.querySelector('[data-hx-get], [data-hx-post], [data-hx-put], [data-hx-delete], [hx-get], [hx-post], [hx-put], [hx-delete]');
  
  if (!htmxExists) {
    logger.warn('HTMX yÃ¼klÃ¼ deÄŸil veya hiÃ§bir HTMX Ã¶zniteliÄŸi bulunamadÄ±. Entegrasyon kuruldu ama etkin olmayacak.');
  }

  // ---- HTMX Olay Dinleyicileri ----

  // HTMX iÃ§erik deÄŸiÅŸikliÄŸi baÅŸlamadan Ã¶nce iÅŸlemler
  document.body.addEventListener('htmx:beforeSwap', function(event) {
    const target = event.detail.target;
    
    // Hedef bileÅŸende Alpine.js durum var mÄ± kontrol et
    if (target) {
      saveAlpineState(target);
    }
  });

  // HTMX iÃ§erik deÄŸiÅŸikliÄŸinden sonra Alpine.js bileÅŸenlerini yeniden baÅŸlat
  document.body.addEventListener('htmx:afterSwap', function(event) {
    const swappedNode = event.detail.target;
    
    // Alpine.js bileÅŸenleri iÃ§eriyor mu kontrol et
    if (hasAlpineComponents(swappedNode)) {
      logger.debug('HTMX sonrasÄ± Alpine.js bileÅŸenleri tespit edildi, yeniden baÅŸlatÄ±lÄ±yor');
      
      // GÃ¼venlik iÃ§in kÃ¼Ã§Ã¼k bir gecikme ekle
      setTimeout(() => {
        initializeAlpineComponents(swappedNode);
        restoreAlpineState(swappedNode);
      }, 10);
    }
  });
  
  // HTMX ajax sorgusu tamamlandÄ±ÄŸÄ±nda 
  document.body.addEventListener('htmx:afterRequest', function(event) {
    // Sadece hata durumunda loglama yap
    if (event.detail.failed) {
      logger.warn(`HTMX isteÄŸi baÅŸarÄ±sÄ±z: ${event.detail.xhr?.status} ${event.detail.xhr?.statusText}`);
    }
  });
  
  // HTMX sayfa yÃ¼klemesi tamamlandÄ±ÄŸÄ±nda
  document.body.addEventListener('htmx:load', function(event) {
    const loadedNode = event.detail.elt;
    
    // Alpine.js bileÅŸenleri iÃ§eriyor mu kontrol et
    if (hasAlpineComponents(loadedNode)) {
      logger.debug('HTMX load sonrasÄ± Alpine.js bileÅŸenleri tespit edildi');
      initializeAlpineComponents(loadedNode);
    }
  });
  
  // HTMX iÃ§erik geÃ§iÅŸi sÄ±rasÄ±nda hata oluÅŸtuÄŸunda
  document.body.addEventListener('htmx:responseError', function(event) {
    logger.error(`HTMX yanÄ±t hatasÄ±: ${event.detail.error}`);
  });

  logger.info('HTMX-Alpine entegrasyonu baÅŸarÄ±yla kuruldu');
  return true;
}

/**
 * Belirtilen DOM dÃ¼ÄŸÃ¼mÃ¼nde Alpine.js bileÅŸeni olup olmadÄ±ÄŸÄ±nÄ± kontrol eder
 * 
 * @param {Element} node - Kontrol edilecek DOM dÃ¼ÄŸÃ¼mÃ¼
 * @returns {boolean} - Alpine.js bileÅŸeni varsa true, yoksa false
 */
function hasAlpineComponents(node) {
  if (!node) return false;
  
  // Node'un kendisinde x-data Ã¶zniteliÄŸi var mÄ±
  if (node.hasAttribute && node.hasAttribute('x-data')) {
    return true;
  }
  
  // Alt elementlerde x-data Ã¶zniteliÄŸi var mÄ±
  return !!node.querySelector('[x-data]');
}

/**
 * Belirtilen DOM dÃ¼ÄŸÃ¼mÃ¼ndeki tÃ¼m Alpine.js bileÅŸenlerini baÅŸlatÄ±r
 * 
 * @param {Element} node - Alpine.js bileÅŸenlerini iÃ§eren DOM dÃ¼ÄŸÃ¼mÃ¼
 * @returns {boolean} - BaÅŸarÄ±lÄ± olursa true, olmazsa false
 */
function initializeAlpineComponents(node) {
  if (!node || !window.Alpine) return false;
  
  try {
    // Alpine.initTree metodunun varlÄ±ÄŸÄ±nÄ± kontrol et
    if (typeof Alpine.initTree === 'function') {
      Alpine.initTree(node);
      logger.debug('Alpine.js bileÅŸenleri baÅŸarÄ±yla baÅŸlatÄ±ldÄ±');
      return true;
    } else {
      logger.error('Alpine.initTree metodu bulunamadÄ±! Alpine.js sÃ¼rÃ¼mÃ¼nÃ¼zÃ¼ kontrol edin.');
      return false;
    }
  } catch (error) {
    logger.error(`Alpine.js baÅŸlatma hatasÄ±: ${error.message}`);
    console.error(error);
    return false;
  }
}

/**
 * Bir DOM dÃ¼ÄŸÃ¼mÃ¼ndeki Alpine.js bileÅŸenlerinin durumunu kaydeder
 * 
 * @param {Element} node - Alpine.js bileÅŸenlerini iÃ§eren DOM dÃ¼ÄŸÃ¼mÃ¼
 */
function saveAlpineState(node) {
  if (!node || !window.Alpine) return;
  
  try {
    // ID'si olan tÃ¼m Alpine.js bileÅŸenlerini bul
    const stateElements = node.querySelectorAll('[x-data][id]');
    
    stateElements.forEach(element => {
      const id = element.id;
      
      // Element Alpine.js tarafÄ±ndan baÅŸlatÄ±lmÄ±ÅŸ mÄ± kontrol et
      if (element.__x && element.__x.$data) {
        // Durum verilerini JSON'a dÃ¶nÃ¼ÅŸtÃ¼r
        try {
          // Sadece temel veri tiplerini iÃ§eren Ã¶zellikleri kopyala
          const state = {};
          Object.entries(element.__x.$data).forEach(([key, value]) => {
            // Fonksiyon olmayan Ã¶zellikleri kopyala
            if (typeof value !== 'function' && !key.startsWith('$')) {
              state[key] = value;
            }
          });
          
          // TemizlenmiÅŸ durumu Ã¶nbelleÄŸe al
          stateCache.set(id, state);
          logger.debug(`${id} ID'li bileÅŸenin durumu kaydedildi`);
        } catch (e) {
          logger.warn(`${id} ID'li bileÅŸenin durumu kaydedilemedi: ${e.message}`);
        }
      }
    });
  } catch (error) {
    logger.error(`Alpine.js durum kaydetme hatasÄ±: ${error.message}`);
  }
}

/**
 * Kaydedilen Alpine.js bileÅŸen durumlarÄ±nÄ± geri yÃ¼kler
 * 
 * @param {Element} node - Alpine.js bileÅŸenlerini iÃ§eren DOM dÃ¼ÄŸÃ¼mÃ¼
 */
function restoreAlpineState(node) {
  if (!node || !window.Alpine || stateCache.size === 0) return;
  
  try {
    // Ã–nbellekte kayÄ±tlÄ± ID'lere sahip bileÅŸenleri bul
    stateCache.forEach((state, id) => {
      const element = node.querySelector(`#${id}`);
      
      // Element var mÄ± ve Alpine.js tarafÄ±ndan baÅŸlatÄ±lmÄ±ÅŸ mÄ± kontrol et
      if (element && element.__x && element.__x.$data) {
        // Durum verilerini Alpine.js bileÅŸenine aktar
        Object.entries(state).forEach(([key, value]) => {
          if (key in element.__x.$data && typeof element.__x.$data[key] !== 'function') {
            element.__x.$data[key] = value;
          }
        });
        
        logger.debug(`${id} ID'li bileÅŸenin durumu geri yÃ¼klendi`);
      }
    });
    
    // Ã–nbelleÄŸi temizle
    stateCache.clear();
  } catch (error) {
    logger.error(`Alpine.js durum geri yÃ¼kleme hatasÄ±: ${error.message}`);
  }
}

// Sayfa yÃ¼klendiÄŸinde HTMX entegrasyonunu otomatik olarak baÅŸlat
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', setupHtmxIntegration);
} else {
  // Sayfa zaten yÃ¼klenmiÅŸse kÃ¼Ã§Ã¼k bir gecikme ile baÅŸlat
  setTimeout(setupHtmxIntegration, 10);
}

// Global API'yi dÄ±ÅŸa aktar
export default {
  setup: setupHtmxIntegration,
  hasAlpineComponents,
  initializeAlpineComponents
};