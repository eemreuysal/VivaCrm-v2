/**
 * VivaCRM - Alpine.js Tarih Filtresi BileÅŸeni
 * 
 * Dashboard ve diÄŸer sayfalarda tarih aralÄ±ÄŸÄ± seÃ§imi yapmak iÃ§in kullanÄ±lan bileÅŸen.
 * Ã–zel tarih aralÄ±klarÄ± ve hazÄ±r periyot seÃ§imleri iÃ§in kullanÄ±lÄ±r.
 */

import { createLogger } from '../../core/utils.js';

// Logger oluÅŸtur
const logger = createLogger('DateFilter', {
  emoji: 'ğŸ“…'
});

/**
 * Tarih filtresi bileÅŸeni
 * Ã–zel tarih aralÄ±klarÄ± seÃ§meyi saÄŸlar
 * 
 * @returns {Object} Alpine.js bileÅŸen nesnesi
 */
export function dateFilterComponent() {
  return {
    // Durum deÄŸiÅŸkenleri
    showDatePicker: false,
    startDate: null,
    endDate: null,
    
    // YaÅŸam dÃ¶ngÃ¼sÃ¼ metodu
    init() {
      // Ãœst dashboard bileÅŸeninden tarih deÄŸerlerini al
      if (this.$root.customStartDate) {
        this.startDate = this.$root.customStartDate;
      }
      
      if (this.$root.customEndDate) {
        this.endDate = this.$root.customEndDate;
      }
      
      logger.debug('Tarih filtresi bileÅŸeni baÅŸlatÄ±ldÄ±');
    },
    
    // Tarih seÃ§ici gÃ¶rÃ¼nÃ¼rlÃ¼ÄŸÃ¼nÃ¼ deÄŸiÅŸtir
    toggleDatePicker() {
      this.showDatePicker = !this.showDatePicker;
    },
    
    // Ã–zel tarih aralÄ±ÄŸÄ±nÄ± uygula
    applyCustomDateRange() {
      if (!this.startDate || !this.endDate) {
        alert('LÃ¼tfen baÅŸlangÄ±Ã§ ve bitiÅŸ tarihlerini seÃ§in');
        return;
      }
      
      // Tarihleri doÄŸrula
      const startDate = new Date(this.startDate);
      const endDate = new Date(this.endDate);
      
      if (startDate > endDate) {
        alert('BaÅŸlangÄ±Ã§ tarihi bitiÅŸ tarihinden sonra olamaz');
        return;
      }
      
      // Ãœst bileÅŸene uygula
      this.$root.customStartDate = this.startDate;
      this.$root.customEndDate = this.endDate;
      this.$root.setPeriod('custom');
      
      // Tarih seÃ§iciyi kapat
      this.showDatePicker = false;
      
      logger.debug(`Ã–zel tarih aralÄ±ÄŸÄ± uygulandÄ±: ${this.startDate} - ${this.endDate}`);
    },
    
    // Son ay iÃ§in hazÄ±r ayar
    setLastMonth() {
      const today = new Date();
      const lastMonth = new Date(today);
      lastMonth.setMonth(today.getMonth() - 1);
      
      this.startDate = this.formatDateForInput(lastMonth);
      this.endDate = this.formatDateForInput(today);
      
      this.applyCustomDateRange();
      
      logger.debug('Son ay filtresi uygulandÄ±');
    },
    
    // Son Ã§eyrek iÃ§in hazÄ±r ayar
    setLastQuarter() {
      const today = new Date();
      const lastQuarter = new Date(today);
      lastQuarter.setMonth(today.getMonth() - 3);
      
      this.startDate = this.formatDateForInput(lastQuarter);
      this.endDate = this.formatDateForInput(today);
      
      this.applyCustomDateRange();
      
      logger.debug('Son Ã§eyrek filtresi uygulandÄ±');
    },
    
    // Son yÄ±l iÃ§in hazÄ±r ayar
    setLastYear() {
      const today = new Date();
      const lastYear = new Date(today);
      lastYear.setFullYear(today.getFullYear() - 1);
      
      this.startDate = this.formatDateForInput(lastYear);
      this.endDate = this.formatDateForInput(today);
      
      this.applyCustomDateRange();
      
      logger.debug('Son yÄ±l filtresi uygulandÄ±');
    },
    
    // Bu ay iÃ§in hazÄ±r ayar
    setThisMonth() {
      const today = new Date();
      const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
      
      this.startDate = this.formatDateForInput(firstDay);
      this.endDate = this.formatDateForInput(today);
      
      this.applyCustomDateRange();
      
      logger.debug('Bu ay filtresi uygulandÄ±');
    },
    
    // Bu hafta iÃ§in hazÄ±r ayar
    setThisWeek() {
      const today = new Date();
      const firstDay = new Date(today);
      const day = today.getDay();
      const diff = today.getDate() - day + (day === 0 ? -6 : 1); // Pazartesi gÃ¼nÃ¼nÃ¼ bul
      firstDay.setDate(diff);
      
      this.startDate = this.formatDateForInput(firstDay);
      this.endDate = this.formatDateForInput(today);
      
      this.applyCustomDateRange();
      
      logger.debug('Bu hafta filtresi uygulandÄ±');
    },
    
    // Input iÃ§in tarih formatla (YYYY-MM-DD)
    formatDateForInput(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      
      return `${year}-${month}-${day}`;
    },
    
    // GÃ¶sterilecek tarih formatÄ± (DD/MM/YYYY)
    formatDateForDisplay(dateStr) {
      if (!dateStr) return '';
      
      try {
        const date = new Date(dateStr);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        
        return `${day}/${month}/${year}`;
      } catch (e) {
        logger.error(`Tarih formatÄ± hatasÄ±: ${e.message}`);
        return dateStr;
      }
    }
  };
}

// ES modÃ¼l olarak dÄ±ÅŸa aktar
export default dateFilterComponent;