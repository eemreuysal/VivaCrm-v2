name: VivaCRM CI/CD Pipeline

on:
  push:
    branches: [ "main", "prod" ]
  pull_request:
    branches: [ "main", "prod" ]

env:
  PYTHON_VERSION: '3.12'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: vivacrm_test
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  DJANGO_SETTINGS_MODULE: core.settings

jobs:
  # Test the application
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        # Health check to ensure postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        # Health check to ensure redis is ready
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install OS dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev postgresql-client libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 shared-mime-info
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-django pytest-cov flake8 black
        pip install -r requirements.txt
    
    - name: Run migrations
      run: |
        python manage.py migrate
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: 'test-secret-key-for-ci'
        DEBUG: 'True'
    
    - name: Run unit tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: 'test-secret-key-for-ci'
        DEBUG: 'True'
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Lint code for quality
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        black --check .

  # Build and test Docker image
  build-test-docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: vivacrm/vivacrm:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker container
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.dev.yml config

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-test-docker]
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: vivacrm/vivacrm:latest,vivacrm/vivacrm:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Deploy to production server
    # This example uses SSH to deploy to a server
    # You would need to set up SSH keys and server details as GitHub secrets
    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /path/to/vivacrm
          git pull
          docker-compose pull
          docker-compose up -d --force-recreate web celery celery-beat nginx
          docker system prune -f